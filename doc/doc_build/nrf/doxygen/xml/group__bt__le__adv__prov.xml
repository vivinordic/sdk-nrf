<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__bt__le__adv__prov" kind="group">
    <compoundname>bt_le_adv_prov</compoundname>
    <title>Bluetooth LE advertising providers subsystem</title>
    <innerclass refid="structbt__le__adv__prov__adv__state" prot="public">bt_le_adv_prov_adv_state</innerclass>
    <innerclass refid="structbt__le__adv__prov__feedback" prot="public">bt_le_adv_prov_feedback</innerclass>
    <innerclass refid="structbt__le__adv__prov__provider" prot="public">bt_le_adv_prov_provider</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__bt__le__adv__prov_1gac71bd614f866ce82cbce56a09653f1b7" prot="public" static="no">
        <type>int(*</type>
        <definition>bt_le_adv_prov_data_get</definition>
        <argsstring>)(struct bt_data *d, const struct bt_le_adv_prov_adv_state *state, struct bt_le_adv_prov_feedback *fb)</argsstring>
        <name>bt_le_adv_prov_data_get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback used to get provider&apos;s data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure to be filled with data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure describing Bluetooth advertising state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure describing provider&apos;s feedback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the operation was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(-ENOENT)</parametername>
</parameternamelist>
<parameterdescription>
<para>If provider does not provide data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Other negative value denotes error specific to provider. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="74" column="9" bodyfile="include/bluetooth/adv_prov.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__le__adv__prov_1gae4fdadafbda4c912c9b8d34087675d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t bt_le_adv_prov_get_ad_prov_cnt</definition>
        <argsstring>(void)</argsstring>
        <name>bt_le_adv_prov_get_ad_prov_cnt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of advertising data packet providers.</para>
<para>The number of advertising data packet providers defines maximum number of elements in advertising packet that can be provided by providers. An advertising data provider may not provide data.</para>
<para><simplesect kind="return"><para>Number of advertising data packet providers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="117" column="8" declfile="include/bluetooth/adv_prov.h" declline="117" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__le__adv__prov_1ga2f023fd69b0da55c55f1fcafd3069cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t bt_le_adv_prov_get_sd_prov_cnt</definition>
        <argsstring>(void)</argsstring>
        <name>bt_le_adv_prov_get_sd_prov_cnt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of scan response data packet providers.</para>
<para>The number of scan response data packet providers defines maximum number of elements in scan response packet that can be provided by providers. A scan response data provider may not provide data.</para>
<para><simplesect kind="return"><para>Number of scan response data packet providers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="127" column="8" declfile="include/bluetooth/adv_prov.h" declline="127" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__le__adv__prov_1ga5c6375664e19ed25f1b88123acf5499c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_adv_prov_get_ad</definition>
        <argsstring>(struct bt_data *ad, size_t *ad_len, const struct bt_le_adv_prov_adv_state *state, struct bt_le_adv_prov_feedback *fb)</argsstring>
        <name>bt_le_adv_prov_get_ad</name>
        <param>
          <type>struct bt_data *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>ad_len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__adv__prov__adv__state" kindref="compound">bt_le_adv_prov_adv_state</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__le__adv__prov__feedback" kindref="compound">bt_le_adv_prov_feedback</ref> *</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill advertising data.</para>
<para>Number of elements in array pointed by ad must be at least equal to <ref refid="group__bt__le__adv__prov_gae4fdadafbda4c912c9b8d34087675d95_1gae4fdadafbda4c912c9b8d34087675d95" kindref="member">bt_le_adv_prov_get_ad_prov_cnt</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ad</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to array to be filled with advertising data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Value describing number of elements in the array pointed by ad. The value is then set by the function to number of filled elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure describing advertising state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fb</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure filled with feedback from advertising data providers.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation was successful. Otherwise, a (negative) error code is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="142" column="5" declfile="include/bluetooth/adv_prov.h" declline="142" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__le__adv__prov_1gaf93d53d0542d209891556dd0a741f899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_adv_prov_get_sd</definition>
        <argsstring>(struct bt_data *sd, size_t *sd_len, const struct bt_le_adv_prov_adv_state *state, struct bt_le_adv_prov_feedback *fb)</argsstring>
        <name>bt_le_adv_prov_get_sd</name>
        <param>
          <type>struct bt_data *</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sd_len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__adv__prov__adv__state" kindref="compound">bt_le_adv_prov_adv_state</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__le__adv__prov__feedback" kindref="compound">bt_le_adv_prov_feedback</ref> *</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill scan response data.</para>
<para>Number of elements in array pointed by sd must be at least equal to <ref refid="group__bt__le__adv__prov_ga2f023fd69b0da55c55f1fcafd3069cf4_1ga2f023fd69b0da55c55f1fcafd3069cf4" kindref="member">bt_le_adv_prov_get_sd_prov_cnt</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">sd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to array to be filled with scan response data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sd_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Value describing number of elements in the array pointed by sd. The value is then set by the function to number of filled elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure describing advertising state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fb</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure filled with feedback from scan response data providers.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation was successful. Otherwise, a (negative) error code is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="159" column="5" declfile="include/bluetooth/adv_prov.h" declline="159" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__le__adv__prov_1ga6275978af65a59f24fdc375d4d66d0e7" prot="public" static="no">
        <name>BT_LE_ADV_PROV_AD_PROVIDER_REGISTER</name>
        <param><defname>pname</defname></param>
        <param><defname>get_data_fn</defname></param>
        <initializer>	STRUCT_SECTION_ITERABLE_ALTERNATE(bt_le_adv_prov_ad, <ref refid="structbt__le__adv__prov__provider" kindref="compound">bt_le_adv_prov_provider</ref>, pname) = { \
		.get_data = get_data_fn,							 \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register advertising data provider.</para>
<para>The macro statically registers an advertising data provider. The provider appends data to advertising packet managed by the Bluetooth LE advertising providers subsystem.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pname</parametername>
</parameternamelist>
<parameterdescription>
<para>Provider name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_data_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to get provider&apos;s advertising data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="92" column="9" bodyfile="include/bluetooth/adv_prov.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__le__adv__prov_1ga9ff3a80df616b465b5627b0e35055d96" prot="public" static="no">
        <name>BT_LE_ADV_PROV_SD_PROVIDER_REGISTER</name>
        <param><defname>pname</defname></param>
        <param><defname>get_data_fn</defname></param>
        <initializer>	STRUCT_SECTION_ITERABLE_ALTERNATE(bt_le_adv_prov_sd, <ref refid="structbt__le__adv__prov__provider" kindref="compound">bt_le_adv_prov_provider</ref>, pname) = { \
		.get_data = get_data_fn,							 \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register scan response data provider.</para>
<para>The macro statically registers a scan response data provider. The provider appends data to scan response packet managed by the Bluetooth LE advertising providers subsystem.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pname</parametername>
</parameternamelist>
<parameterdescription>
<para>Provider name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_data_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to get provider&apos;s scan response data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="105" column="9" bodyfile="include/bluetooth/adv_prov.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The subsystem manages advertising packets and scan response packets. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
