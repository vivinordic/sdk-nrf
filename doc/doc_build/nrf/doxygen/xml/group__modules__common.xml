<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__modules__common" kind="group">
    <compoundname>modules_common</compoundname>
    <title>Modules common library</title>
    <innerclass refid="structmodule__data" prot="public">module_data</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__modules__common_1ga1a5a4226af0888d05e97f5352a7d8bf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void module_purge_queue</definition>
        <argsstring>(struct module_data *module)</argsstring>
        <name>module_purge_queue</name>
        <param>
          <type>struct <ref refid="structmodule__data" kindref="compound">module_data</ref> *</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Purge a module&apos;s queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">module</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a structure containing module metadata.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, otherwise a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="applications/asset_tracker_v2/src/modules/modules_common.h" line="97" column="6" declfile="applications/asset_tracker_v2/src/modules/modules_common.h" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__modules__common_1gabec396fc20b04989d4d217a3470d8746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int module_get_next_msg</definition>
        <argsstring>(struct module_data *module, void *msg)</argsstring>
        <name>module_get_next_msg</name>
        <param>
          <type>struct <ref refid="structmodule__data" kindref="compound">module_data</ref> *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Get the next message in a module&apos;s queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">module</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a structure containing module metadata. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a message buffer that the output will be written to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, otherwise a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="applications/asset_tracker_v2/src/modules/modules_common.h" line="106" column="5" declfile="applications/asset_tracker_v2/src/modules/modules_common.h" declline="106" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modules__common_1gaaff8f55ee1fd70fa097f79f2e712ca4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int module_enqueue_msg</definition>
        <argsstring>(struct module_data *module, void *msg)</argsstring>
        <name>module_enqueue_msg</name>
        <param>
          <type>struct <ref refid="structmodule__data" kindref="compound">module_data</ref> *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Enqueue message to a module&apos;s queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">module</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a structure containing module metadata. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a message that will be enqueued.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, otherwise a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="applications/asset_tracker_v2/src/modules/modules_common.h" line="115" column="5" declfile="applications/asset_tracker_v2/src/modules/modules_common.h" declline="115" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modules__common_1ga9dd22212a2c0ed95aa7c5c46e7e4aa30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modules_shutdown_register</definition>
        <argsstring>(uint32_t id_reg)</argsstring>
        <name>modules_shutdown_register</name>
        <param>
          <type>uint32_t</type>
          <declname>id_reg</declname>
        </param>
        <briefdescription>
<para>Register that a module has performed a graceful shutdown. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of module.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If this API has been called for all modules supporting graceful shutdown in the application. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="applications/asset_tracker_v2/src/modules/modules_common.h" line="124" column="6" declfile="applications/asset_tracker_v2/src/modules/modules_common.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__modules__common_1gacad8a900eb708ba75f7b7109a509cbcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int module_start</definition>
        <argsstring>(struct module_data *module)</argsstring>
        <name>module_start</name>
        <param>
          <type>struct <ref refid="structmodule__data" kindref="compound">module_data</ref> *</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Register and start a module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">module</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a structure containing module metadata.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, otherwise a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="applications/asset_tracker_v2/src/modules/modules_common.h" line="132" column="5" declfile="applications/asset_tracker_v2/src/modules/modules_common.h" declline="132" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modules__common_1ga321429867cafb8263785af07c1cb5d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t module_active_count_get</definition>
        <argsstring>(void)</argsstring>
        <name>module_active_count_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the number of active modules in the application. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of active modules in the application. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="applications/asset_tracker_v2/src/modules/modules_common.h" line="138" column="10" declfile="applications/asset_tracker_v2/src/modules/modules_common.h" declline="138" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__modules__common_1ga54b9826627bf2c0b18180bdbc2017c16" prot="public" static="no">
        <name>IS_EVENT</name>
        <param><defname>_ptr</defname></param>
        <param><defname>_mod</defname></param>
        <param><defname>_evt</defname></param>
        <initializer>		is_ ## _mod ## _module_event(&amp;_ptr-&gt;module._mod.header) &amp;&amp;		\
		_ptr-&gt;module._mod.type == _evt</initializer>
        <briefdescription>
<para>Macro that checks if an event is of a certain type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of module message struct variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_mod</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of module that the event corresponds to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_evt</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the event matches the event checked for, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="applications/asset_tracker_v2/src/modules/modules_common.h" line="34" column="9" bodyfile="applications/asset_tracker_v2/src/modules/modules_common.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modules__common_1ga637d6c2bd8dc777f2b728e3e9148238e" prot="public" static="no">
        <name>SEND_EVENT</name>
        <param><defname>_mod</defname></param>
        <param><defname>_type</defname></param>
        <initializer>	struct _mod ## _module_event *event = new_ ## _mod ## _module_event();		\
	__ASSERT(event, &quot;Not enough heap left to allocate event&quot;);			\
	event-&gt;type = _type;								\
	<ref refid="group__app__event__manager_gaecbb9c71724df279f30031be97369383_1gaecbb9c71724df279f30031be97369383" kindref="member">APP_EVENT_SUBMIT</ref>(event)</initializer>
        <briefdescription>
<para>Macro used to submit an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_mod</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of module that the event corresponds to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the type of event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="applications/asset_tracker_v2/src/modules/modules_common.h" line="43" column="9" bodyfile="applications/asset_tracker_v2/src/modules/modules_common.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modules__common_1ga1410ea40f9122c386cd9e1a1531b4d1d" prot="public" static="no">
        <name>SEND_ERROR</name>
        <param><defname>_mod</defname></param>
        <param><defname>_type</defname></param>
        <param><defname>_error_code</defname></param>
        <initializer>	struct _mod ## _module_event *event = new_ ## _mod ## _module_event();		\
	__ASSERT(event, &quot;Not enough heap left to allocate event&quot;);			\
	event-&gt;type = _type;								\
	event-&gt;data.err = _error_code;							\
	<ref refid="group__app__event__manager_gaecbb9c71724df279f30031be97369383_1gaecbb9c71724df279f30031be97369383" kindref="member">APP_EVENT_SUBMIT</ref>(event)</initializer>
        <briefdescription>
<para>Macro used to submit an error event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_mod</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of module that the event corresponds to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the type of error event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="applications/asset_tracker_v2/src/modules/modules_common.h" line="55" column="9" bodyfile="applications/asset_tracker_v2/src/modules/modules_common.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modules__common_1gab4c516ed4ccd36959bd5fb7c37a43700" prot="public" static="no">
        <name>SEND_SHUTDOWN_ACK</name>
        <param><defname>_mod</defname></param>
        <param><defname>_type</defname></param>
        <param><defname>_id</defname></param>
        <initializer>	struct _mod ## _module_event *event = new_ ## _mod ## _module_event();		\
	__ASSERT(event, &quot;Not enough heap left to allocate event&quot;);			\
	event-&gt;type = _type;								\
	event-&gt;data.id = _id;								\
	<ref refid="group__app__event__manager_gaecbb9c71724df279f30031be97369383_1gaecbb9c71724df279f30031be97369383" kindref="member">APP_EVENT_SUBMIT</ref>(event)</initializer>
        <briefdescription>
<para>Macro used to submit a shutdown event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_mod</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of module that the event corresponds to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the type of shutdown event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the module that acknowledges the shutdown. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="applications/asset_tracker_v2/src/modules/modules_common.h" line="68" column="9" bodyfile="applications/asset_tracker_v2/src/modules/modules_common.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Library that exposes generic functionality shared between modules. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
