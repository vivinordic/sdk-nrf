<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structwake__up__event" kind="struct" language="C++" prot="public">
    <compoundname>wake_up_event</compoundname>
    <includes refid="include_2caf_2events_2power__event_8h" local="no">power_event.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structwake__up__event_aa872cc3200ec318ff38f1c94b5bca480_1aa872cc3200ec318ff38f1c94b5bca480" prot="public" static="no" mutable="no">
        <type>struct app_event_header</type>
        <definition>struct app_event_header wake_up_event::header</definition>
        <argsstring></argsstring>
        <name>header</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Event header. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/caf/events/power_event.h" line="57" column="6" bodyfile="include/caf/events/power_event.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wake up event. </para>
    </briefdescription>
    <detaileddescription>
<para>The wake up event is submitted to trigger exiting the suspended state.</para>
<para>The wake up event can be submitted by any application module after the application is suspended. The event can be submitted for example on button press or sensor trigger.</para>
<para>Every application module that handles wake up event should exit suspended state, turn on functionalities disabled on <ref refid="structpower__down__event" kindref="compound">power_down_event</ref> and submit <ref refid="structmodule__state__event" kindref="compound">module_state_event</ref> with state set to MODULE_STATE_READY. If the module is already woken up, it should ignore the event. The module must not consume the wake up event to ensure that other listeners will be informed.</para>
<para>The module that controls power management of the application should be an only early subscriber for the wake up event. This module can consume the wake up events to prevent waking up the application modules after fatal error.</para>
<para><simplesect kind="note"><para>For more information about suspending modules see <ref refid="structpower__down__event" kindref="compound">power_down_event</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="include/caf/events/power_event.h" line="79" column="1" bodyfile="include/caf/events/power_event.h" bodystart="79" bodyend="82"/>
    <listofallmembers>
      <member refid="structwake__up__event_aa872cc3200ec318ff38f1c94b5bca480_1aa872cc3200ec318ff38f1c94b5bca480" prot="public" virt="non-virtual"><scope>wake_up_event</scope><name>header</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
