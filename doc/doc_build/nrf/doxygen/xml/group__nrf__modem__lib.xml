<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__nrf__modem__lib" kind="group">
    <compoundname>nrf_modem_lib</compoundname>
    <title>Modem library integration layer.</title>
    <innerclass refid="structnrf__modem__lib__init__cb" prot="public">nrf_modem_lib_init_cb</innerclass>
    <innerclass refid="structnrf__modem__lib__shutdown__cb" prot="public">nrf_modem_lib_shutdown_cb</innerclass>
    <innerclass refid="structnrf__modem__lib__diag__stats" prot="public">nrf_modem_lib_diag_stats</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__modem__lib_1ga6a19283326ca6f8e487b071f3a0bbaa3" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_modem_mode</name>
        <enumvalue id="group__nrf__modem__lib_ga6a19283326ca6f8e487b071f3a0bbaa3_1gga6a19283326ca6f8e487b071f3a0bbaa3a83feb61d42f8db9f494019fcea2c0148" prot="public">
          <name>NORMAL_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Normal operation mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__modem__lib_ga6a19283326ca6f8e487b071f3a0bbaa3_1gga6a19283326ca6f8e487b071f3a0bbaa3aa71eabb1e0f2bccf3e1668bbeee4a56d" prot="public">
          <name>BOOTLOADER_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bootloader (full DFU) mode </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Modem library mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/nrf_modem_lib.h" line="33" column="1" bodyfile="include/modem/nrf_modem_lib.h" bodystart="33" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__modem__lib_1gacf2b1e6b30a67ecbdb4b4cd179f1ead5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nrf_modem_lib_init</definition>
        <argsstring>(enum nrf_modem_mode mode)</argsstring>
        <name>nrf_modem_lib_init</name>
        <param>
          <type>enum <ref refid="group__nrf__modem__lib_ga6a19283326ca6f8e487b071f3a0bbaa3_1ga6a19283326ca6f8e487b071f3a0bbaa3" kindref="member">nrf_modem_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Initialize the Modem library and turn on the modem. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes all integration components of the nrf_modem library and turns on the modem. The operation can take a few minutes when a firmware update is scheduled. If your application supports modem firmware updates, consider initializing the library manually to have control of what the application should do in the meantime.</para>
<para>The library can initialize the modem in normal mode or bootloader mode.</para>
<para>The bootloader mode is used to update the whole modem firmware. When modem is initialized in bootloader mode, no other functionality is available. In particular, networking sockets and AT commands won&apos;t be available.</para>
<para>To switch between the bootloader mode and normal mode, shutdown the modem with <ref refid="group__nrf__modem__lib_ga253305b94dd05d8d9e659ce310a5a097_1ga253305b94dd05d8d9e659ce310a5a097" kindref="member">nrf_modem_lib_shutdown()</ref> and re-initialize it in the desired mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Zero on success, non-zero otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/nrf_modem_lib.h" line="61" column="5" declfile="include/modem/nrf_modem_lib.h" declline="61" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__modem__lib_1ga253305b94dd05d8d9e659ce310a5a097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nrf_modem_lib_shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_modem_lib_shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Shutdown the Modem library and turn off the modem. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int Zero on success, non-zero otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/nrf_modem_lib.h" line="68" column="5" declfile="include/modem/nrf_modem_lib.h" declline="68" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__modem__lib_1gaf01ec0e5f89a170b576e067d8613c2e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrf_modem_fault_handler</definition>
        <argsstring>(struct nrf_modem_fault_info *fault_info)</argsstring>
        <name>nrf_modem_fault_handler</name>
        <param>
          <type>struct nrf_modem_fault_info *</type>
          <declname>fault_info</declname>
        </param>
        <briefdescription>
<para>Modem fault handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fault_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Modem fault information. Contains the fault reason and, in some cases, the modem program counter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/nrf_modem_lib.h" line="135" column="6" declfile="include/modem/nrf_modem_lib.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__modem__lib_1ga3d636b05cc1114b1ddc1e5664b8f69d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* nrf_modem_lib_fault_strerror</definition>
        <argsstring>(int fault)</argsstring>
        <name>nrf_modem_lib_fault_strerror</name>
        <param>
          <type>int</type>
          <declname>fault</declname>
        </param>
        <briefdescription>
<para>Retrieve a statically allocated textual description of a given fault. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fault</parametername>
</parameternamelist>
<parameterdescription>
<para>The fault. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char* Textual description of the given fault. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/nrf_modem_lib.h" line="144" column="12" declfile="include/modem/nrf_modem_lib.h" declline="144" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__modem__lib_1ga4bfb05301619a4239a1fef62d114198d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nrf_modem_lib_diag_stats_get</definition>
        <argsstring>(struct nrf_modem_lib_diag_stats *stats)</argsstring>
        <name>nrf_modem_lib_diag_stats_get</name>
        <param>
          <type>struct <ref refid="structnrf__modem__lib__diag__stats" kindref="compound">nrf_modem_lib_diag_stats</ref> *</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
<para>Retrieve heap runtime statistics. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve runtime statistics for the shared memory and library heaps.</para>
<para><simplesect kind="return"><para>int Zero on success, non-zero otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/nrf_modem_lib.h" line="165" column="5" declfile="include/modem/nrf_modem_lib.h" declline="165" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__modem__lib_1ga4cf47c947de4b76a1de76a2ac85f7f15" prot="public" static="no">
        <name>NRF_MODEM_LIB_ON_INIT</name>
        <param><defname>name</defname></param>
        <param><defname>_callback</defname></param>
        <param><defname>_context</defname></param>
        <initializer>	static void _callback(int ret, void *ctx);                                                 \
	STRUCT_SECTION_ITERABLE(<ref refid="structnrf__modem__lib__init__cb" kindref="compound">nrf_modem_lib_init_cb</ref>, nrf_modem_hook_##name) = {                  \
		.callback = _callback,                                                             \
		.context = _context,                                                               \
	};</initializer>
        <briefdescription>
<para>Define a callback for <ref refid="group__nrf__modem__lib_gacf2b1e6b30a67ecbdb4b4cd179f1ead5_1gacf2b1e6b30a67ecbdb4b4cd179f1ead5" kindref="member">nrf_modem_lib_init</ref> calls. </para>
        </briefdescription>
        <detaileddescription>
<para>The callback function <computeroutput>_callback</computeroutput> is invoked after the library has been initialized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_context</parametername>
</parameternamelist>
<parameterdescription>
<para>User-defined context for the callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/nrf_modem_lib.h" line="106" column="9" bodyfile="include/modem/nrf_modem_lib.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__modem__lib_1gaf3d0a73b4423baf11cc9f9326c218669" prot="public" static="no">
        <name>NRF_MODEM_LIB_ON_SHUTDOWN</name>
        <param><defname>name</defname></param>
        <param><defname>_callback</defname></param>
        <param><defname>_context</defname></param>
        <initializer>	static void _callback(void *ctx);                                                          \
	STRUCT_SECTION_ITERABLE(<ref refid="structnrf__modem__lib__shutdown__cb" kindref="compound">nrf_modem_lib_shutdown_cb</ref>, nrf_modem_hook_##name) = {              \
		.callback = _callback,                                                             \
		.context = _context,                                                               \
	};</initializer>
        <briefdescription>
<para>Define a callback for <ref refid="group__nrf__modem__lib_ga253305b94dd05d8d9e659ce310a5a097_1ga253305b94dd05d8d9e659ce310a5a097" kindref="member">nrf_modem_lib_shutdown</ref> calls. </para>
        </briefdescription>
        <detaileddescription>
<para>The callback function <computeroutput>_callback</computeroutput> is invoked before the library is shutdown.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_context</parametername>
</parameternamelist>
<parameterdescription>
<para>User-defined context for the callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/nrf_modem_lib.h" line="122" column="9" bodyfile="include/modem/nrf_modem_lib.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Modem library wrapper. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
