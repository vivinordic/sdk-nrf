<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dfu__multi__image_8h" kind="file" language="C++">
    <compoundname>dfu_multi_image.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <incdepgraph>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="1">
        <label>include/dfu/dfu_multi_image.h</label>
        <link refid="dfu__multi__image_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structdfu__image__writer" prot="public">dfu_image_writer</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__dfu__multi__image_ga5aaca0b29b1c71b2d38a176d84fefacb_1ga5aaca0b29b1c71b2d38a176d84fefacb" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* dfu_image_open_t) (int image_id, size_t image_size)</definition>
        <argsstring>)(int image_id, size_t image_size)</argsstring>
        <name>dfu_image_open_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/dfu_multi_image.h" line="51" column="9" bodyfile="include/dfu/dfu_multi_image.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dfu__multi__image_ga18db3f4f710893c1e24106afdb0a7d79_1ga18db3f4f710893c1e24106afdb0a7d79" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* dfu_image_write_t) (const uint8_t *chunk, size_t chunk_size)</definition>
        <argsstring>)(const uint8_t *chunk, size_t chunk_size)</argsstring>
        <name>dfu_image_write_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/dfu_multi_image.h" line="52" column="9" bodyfile="include/dfu/dfu_multi_image.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dfu__multi__image_ga0c381503a72f4792f60ecf1057292c04_1ga0c381503a72f4792f60ecf1057292c04" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* dfu_image_close_t) (bool success)</definition>
        <argsstring>)(bool success)</argsstring>
        <name>dfu_image_close_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/dfu_multi_image.h" line="53" column="9" bodyfile="include/dfu/dfu_multi_image.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__dfu__multi__image_gab7362d30c405c8245089db54fa0c7c8e_1gab7362d30c405c8245089db54fa0c7c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dfu_multi_image_init</definition>
        <argsstring>(uint8_t *buffer, size_t buffer_size)</argsstring>
        <name>dfu_multi_image_init</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <briefdescription>
<para>Initialize DFU Multi Image library context. </para>
        </briefdescription>
        <detaileddescription>
<para>Resets the internal state of the DFU Multi Image library and initializes necessary resources. In particular, the function removes all writers previously registered with the <computeroutput>dfu_multi_image_register_writer</computeroutput> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store DFU Multi Image header in case it spans multiple chunks of the package. The buffer is only needed until the header is parsed, so the same buffer can be provided to the <computeroutput>dfu_target_mcuboot_set_buf</computeroutput> function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer to store DFU Multi Image header.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL If the provided buffer is too small. </para>
</simplesect>
<simplesect kind="return"><para>0 On success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/dfu_multi_image.h" line="114" column="5" declfile="include/dfu/dfu_multi_image.h" declline="114" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__dfu__multi__image_ga7b5f690240dca272cf0a4dd1c15465c1_1ga7b5f690240dca272cf0a4dd1c15465c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dfu_multi_image_register_writer</definition>
        <argsstring>(const struct dfu_image_writer *writer)</argsstring>
        <name>dfu_multi_image_register_writer</name>
        <param>
          <type>const struct <ref refid="structdfu__image__writer" kindref="compound">dfu_image_writer</ref> *</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
<para>Register DFU image writer. </para>
        </briefdescription>
        <detaileddescription>
<para>Registers functions for opening, writing and closing a single image included in the downloaded DFU Multi Image package.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">writer</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure that contains the applicable image identifier and functions to be registered.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-ENOMEM If the image writer could not be registered due to lack of empty slots. </para>
</simplesect>
<simplesect kind="return"><para>0 On success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/dfu_multi_image.h" line="128" column="5" declfile="include/dfu/dfu_multi_image.h" declline="128" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__dfu__multi__image_ga9995857413921880c401e29d901bf2db_1ga9995857413921880c401e29d901bf2db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dfu_multi_image_write</definition>
        <argsstring>(size_t offset, const uint8_t *chunk, size_t chunk_size)</argsstring>
        <name>dfu_multi_image_write</name>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>chunk</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chunk_size</declname>
        </param>
        <briefdescription>
<para>Write subsequent DFU Multi Image package chunk. </para>
        </briefdescription>
        <detaileddescription>
<para>Called to consume a subsequent chunk of the DFU Multi Image package. The initial bytes of the package contain a header that allows the library to learn offsets of particular images within the entire package. After the header is parsed, the registered image writers are used to store the image data.</para>
<para>The package chunks must be provided in order.</para>
<para>When an image for which no writer has been registered is found in the package, the library may decide to skip ahead the image. For that reason, a user of the function must provide the <computeroutput>offset</computeroutput> argument to validate the chunk&apos;s position against the current write position and potentially drop the bytes that are not needed anymore.</para>
<para>A user shall NOT write any more chunks after any write results in a failure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the chunk within the entire package. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">chunk</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the chunk&apos;s data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">chunk_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the chunk.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ESPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>offset</computeroutput> is bigger than expected which may indicate a data gap or writing more data than declared in the package header. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>negative On other failure. </para>
</simplesect>
<simplesect kind="return"><para>0 On success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/dfu_multi_image.h" line="156" column="5" declfile="include/dfu/dfu_multi_image.h" declline="156" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__dfu__multi__image_gabe243243a6348245e2aa2ffd1cf685bc_1gabe243243a6348245e2aa2ffd1cf685bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dfu_multi_image_offset</definition>
        <argsstring>(void)</argsstring>
        <name>dfu_multi_image_offset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns DFU Multi Image package write position. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Offset of the next needed package chunk in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/dfu_multi_image.h" line="163" column="8" declfile="include/dfu/dfu_multi_image.h" declline="163" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__dfu__multi__image_ga0a5bab6dbeb1ab1c4b409f2f5dc76782_1ga0a5bab6dbeb1ab1c4b409f2f5dc76782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dfu_multi_image_done</definition>
        <argsstring>(bool success)</argsstring>
        <name>dfu_multi_image_done</name>
        <param>
          <type>bool</type>
          <declname>success</declname>
        </param>
        <briefdescription>
<para>Complete DFU Multi Image package write. </para>
        </briefdescription>
        <detaileddescription>
<para>Close an open image writer if such exists. Additionally, if <computeroutput>success</computeroutput> argument is true, the function validates that all images listed in the package header have been fully written.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">success</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates that a user expects all the package contents to have been written successfully.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-ESPIPE If <computeroutput>success</computeroutput> and not all package contents have been written yet. </para>
</simplesect>
<simplesect kind="return"><para>negative On other failure. </para>
</simplesect>
<simplesect kind="return"><para>0 On success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/dfu_multi_image.h" line="179" column="5" declfile="include/dfu/dfu_multi_image.h" declline="179" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LicenseRef-Nordic-5-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DFU_MULTI_IMAGE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DFU_MULTI_IMAGE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="group__dfu__multi__image_ga5aaca0b29b1c71b2d38a176d84fefacb_1ga5aaca0b29b1c71b2d38a176d84fefacb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__dfu__multi__image_ga5aaca0b29b1c71b2d38a176d84fefacb_1ga5aaca0b29b1c71b2d38a176d84fefacb" kindref="member">dfu_image_open_t</ref>)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>image_id,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>image_size);</highlight></codeline>
<codeline lineno="52" refid="group__dfu__multi__image_ga18db3f4f710893c1e24106afdb0a7d79_1ga18db3f4f710893c1e24106afdb0a7d79" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__dfu__multi__image_ga18db3f4f710893c1e24106afdb0a7d79_1ga18db3f4f710893c1e24106afdb0a7d79" kindref="member">dfu_image_write_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*chunk,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunk_size);</highlight></codeline>
<codeline lineno="53" refid="group__dfu__multi__image_ga0c381503a72f4792f60ecf1057292c04_1ga0c381503a72f4792f60ecf1057292c04" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__dfu__multi__image_ga0c381503a72f4792f60ecf1057292c04_1ga0c381503a72f4792f60ecf1057292c04" kindref="member">dfu_image_close_t</ref>)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structdfu__image__writer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdfu__image__writer" kindref="compound">dfu_image_writer</ref><sp/>{</highlight></codeline>
<codeline lineno="62" refid="structdfu__image__writer_a6a3be7e16b322df1fe40f31c2e9c3dd8_1a6a3be7e16b322df1fe40f31c2e9c3dd8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structdfu__image__writer_a6a3be7e16b322df1fe40f31c2e9c3dd8_1a6a3be7e16b322df1fe40f31c2e9c3dd8" kindref="member">image_id</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structdfu__image__writer_a9743cc70af0e18e12859c6d8bace6b53_1a9743cc70af0e18e12859c6d8bace6b53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__dfu__multi__image_ga5aaca0b29b1c71b2d38a176d84fefacb_1ga5aaca0b29b1c71b2d38a176d84fefacb" kindref="member">dfu_image_open_t</ref><sp/><ref refid="structdfu__image__writer_a9743cc70af0e18e12859c6d8bace6b53_1a9743cc70af0e18e12859c6d8bace6b53" kindref="member">open</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structdfu__image__writer_a17c5a5b68f14203d6454547f10defc2a_1a17c5a5b68f14203d6454547f10defc2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__dfu__multi__image_ga18db3f4f710893c1e24106afdb0a7d79_1ga18db3f4f710893c1e24106afdb0a7d79" kindref="member">dfu_image_write_t</ref><sp/><ref refid="structdfu__image__writer_a17c5a5b68f14203d6454547f10defc2a_1a17c5a5b68f14203d6454547f10defc2a" kindref="member">write</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structdfu__image__writer_a0f53edae5d563a78309b641c7b8bc31e_1a0f53edae5d563a78309b641c7b8bc31e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__dfu__multi__image_ga0c381503a72f4792f60ecf1057292c04_1ga0c381503a72f4792f60ecf1057292c04" kindref="member">dfu_image_close_t</ref><sp/><ref refid="structdfu__image__writer_a0f53edae5d563a78309b641c7b8bc31e_1a0f53edae5d563a78309b641c7b8bc31e" kindref="member">close</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="group__dfu__multi__image_gab7362d30c405c8245089db54fa0c7c8e_1gab7362d30c405c8245089db54fa0c7c8e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__dfu__multi__image_gab7362d30c405c8245089db54fa0c7c8e_1gab7362d30c405c8245089db54fa0c7c8e" kindref="member">dfu_multi_image_init</ref>(uint8_t<sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_size);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="group__dfu__multi__image_ga7b5f690240dca272cf0a4dd1c15465c1_1ga7b5f690240dca272cf0a4dd1c15465c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__dfu__multi__image_ga7b5f690240dca272cf0a4dd1c15465c1_1ga7b5f690240dca272cf0a4dd1c15465c1" kindref="member">dfu_multi_image_register_writer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdfu__image__writer" kindref="compound">dfu_image_writer</ref><sp/>*writer);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="group__dfu__multi__image_ga9995857413921880c401e29d901bf2db_1ga9995857413921880c401e29d901bf2db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__dfu__multi__image_ga9995857413921880c401e29d901bf2db_1ga9995857413921880c401e29d901bf2db" kindref="member">dfu_multi_image_write</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*chunk,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunk_size);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="group__dfu__multi__image_gabe243243a6348245e2aa2ffd1cf685bc_1gabe243243a6348245e2aa2ffd1cf685bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__dfu__multi__image_gabe243243a6348245e2aa2ffd1cf685bc_1gabe243243a6348245e2aa2ffd1cf685bc" kindref="member">dfu_multi_image_offset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="group__dfu__multi__image_ga0a5bab6dbeb1ab1c4b409f2f5dc76782_1ga0a5bab6dbeb1ab1c4b409f2f5dc76782" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__dfu__multi__image_ga0a5bab6dbeb1ab1c4b409f2f5dc76782_1ga0a5bab6dbeb1ab1c4b409f2f5dc76782" kindref="member">dfu_multi_image_done</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DFU_MULTI_IMAGE_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/dfu/dfu_multi_image.h"/>
  </compounddef>
</doxygen>
