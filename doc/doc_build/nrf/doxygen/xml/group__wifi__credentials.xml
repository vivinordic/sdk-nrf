<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__wifi__credentials" kind="group">
    <compoundname>wifi_credentials</compoundname>
    <title>Wi-Fi credentials library</title>
    <innerclass refid="structwifi__credentials__header" prot="public">wifi_credentials_header</innerclass>
    <innerclass refid="structwifi__credentials__personal" prot="public">wifi_credentials_personal</innerclass>
    <innerclass refid="structwifi__credentials__enterprise" prot="public">wifi_credentials_enterprise</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__wifi__credentials_1ga30c9333f10e8e8d03f268fb5c9a69562" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* wifi_credentials_ssid_cb) (void *cb_arg, const char *ssid, size_t ssid_len)</definition>
        <argsstring>)(void *cb_arg, const char *ssid, size_t ssid_len)</argsstring>
        <name>wifi_credentials_ssid_cb</name>
        <briefdescription>
<para>Callback type for wifi_credentials_for_each_ssid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cb_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments for the callback function. Appropriate cb_arg is transferred by wifi_credentials_for_each_ssid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>SSID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ssid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of SSID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="185" column="9" bodyfile="include/net/wifi_credentials.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wifi__credentials_1ga4de48b2d5dd676d9b4da1e93ec1a800b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wifi_credentials_get_by_ssid_personal</definition>
        <argsstring>(const char *ssid, size_t ssid_len, enum wifi_security_type *type, uint8_t *bssid_buf, size_t bssid_buf_len, char *password_buf, size_t password_buf_len, size_t *password_len, uint32_t *flags)</argsstring>
        <name>wifi_credentials_get_by_ssid_personal</name>
        <param>
          <type>const char *</type>
          <declname>ssid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ssid_len</declname>
        </param>
        <param>
          <type>enum wifi_security_type *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>bssid_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bssid_buf_len</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>password_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>password_buf_len</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>password_len</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Get credentials for given SSID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>SSID to look for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ssid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of SSID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Wi-Fi security type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bssid_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to store BSSID if it was fixed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bssid_buf_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of bssid_buf </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">password_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to store password </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">password_buf_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of password_buf </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">password_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of password </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 Success. </para>
</simplesect>
<simplesect kind="return"><para>-ENOENT No network with this SSID was found. </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL A required buffer was NULL or invalid SSID length. </para>
</simplesect>
<simplesect kind="return"><para>-EPROTO The network with this SSID is not a personal network. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="100" column="5" declfile="include/net/wifi_credentials.h" declline="100" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi__credentials_1ga2b4ea2c428c80b7354319aa5bc6e787d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wifi_credentials_set_personal</definition>
        <argsstring>(const char *ssid, size_t ssid_len, enum wifi_security_type type, const uint8_t *bssid, size_t bssid_len, const char *password, size_t password_len, uint32_t flags)</argsstring>
        <name>wifi_credentials_set_personal</name>
        <param>
          <type>const char *</type>
          <declname>ssid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ssid_len</declname>
        </param>
        <param>
          <type>enum wifi_security_type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bssid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bssid_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>password_len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set credentials for given SSID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>SSID to look for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ssid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of SSID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Wi-Fi security type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bssid</parametername>
</parameternamelist>
<parameterdescription>
<para>BSSID (may be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bssid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of BSSID buffer (either 0 or WIFI_MAC_ADDR_LEN) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">password</parametername>
</parameternamelist>
<parameterdescription>
<para>password </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">password_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of password </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 Success. Credentials are stored in persistent storage. </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL A required buffer was NULL or security type is not supported. </para>
</simplesect>
<simplesect kind="return"><para>-ENOTSUP Security type is not supported. </para>
</simplesect>
<simplesect kind="return"><para>-ENOBUFS All slots are already taken. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="129" column="5" declfile="include/net/wifi_credentials.h" declline="129" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi__credentials_1ga3d83001e713206ec07f94996137537d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wifi_credentials_get_by_ssid_personal_struct</definition>
        <argsstring>(const char *ssid, size_t ssid_len, struct wifi_credentials_personal *buf)</argsstring>
        <name>wifi_credentials_get_by_ssid_personal_struct</name>
        <param>
          <type>const char *</type>
          <declname>ssid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ssid_len</declname>
        </param>
        <param>
          <type>struct <ref refid="structwifi__credentials__personal" kindref="compound">wifi_credentials_personal</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get credentials for given SSID by struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>SSID to look for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ssid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of SSID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>credentials Pointer to struct where credentials are stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 Success. </para>
</simplesect>
<simplesect kind="return"><para>-ENOENT No network with this SSID was found. </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL A required buffer was NULL or too small. </para>
</simplesect>
<simplesect kind="return"><para>-EPROTO The network with this SSID is not a personal network. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="152" column="5" declfile="include/net/wifi_credentials.h" declline="152" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi__credentials_1ga1b5525c7a6a7ca312236a2c674d94055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wifi_credentials_set_personal_struct</definition>
        <argsstring>(const struct wifi_credentials_personal *creds)</argsstring>
        <name>wifi_credentials_set_personal_struct</name>
        <param>
          <type>const struct <ref refid="structwifi__credentials__personal" kindref="compound">wifi_credentials_personal</ref> *</type>
          <declname>creds</declname>
        </param>
        <briefdescription>
<para>Set credentials for given SSID by struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">creds</parametername>
</parameternamelist>
<parameterdescription>
<para>credentials Pointer to struct from which credentials are loaded</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 Success. </para>
</simplesect>
<simplesect kind="return"><para>-ENOENT No network with this SSID was found. </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL A required buffer was NULL or incorrect size. </para>
</simplesect>
<simplesect kind="return"><para>-ENOBUFS All slots are already taken. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="165" column="5" declfile="include/net/wifi_credentials.h" declline="165" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi__credentials_1ga644d29db8091512a977f8e27b245975e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wifi_credentials_delete_by_ssid</definition>
        <argsstring>(const char *ssid, size_t ssid_len)</argsstring>
        <name>wifi_credentials_delete_by_ssid</name>
        <param>
          <type>const char *</type>
          <declname>ssid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ssid_len</declname>
        </param>
        <briefdescription>
<para>Delete credentials for given SSID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>SSID to look for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ssid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of SSID</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-ENOENT if No network with this SSID was found. </para>
</simplesect>
<simplesect kind="return"><para>0 on success, otherwise a negative error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="176" column="5" declfile="include/net/wifi_credentials.h" declline="176" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi__credentials_1ga3a5b20d07afc52cc452a9c55998ebcf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wifi_credentials_for_each_ssid</definition>
        <argsstring>(wifi_credentials_ssid_cb cb, void *cb_arg)</argsstring>
        <name>wifi_credentials_for_each_ssid</name>
        <param>
          <type><ref refid="group__wifi__credentials_ga30c9333f10e8e8d03f268fb5c9a69562_1ga30c9333f10e8e8d03f268fb5c9a69562" kindref="member">wifi_credentials_ssid_cb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_arg</declname>
        </param>
        <briefdescription>
<para>Call callback for each registered SSID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>argument for callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="193" column="6" declfile="include/net/wifi_credentials.h" declline="193" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__wifi__credentials_1ga656bc737cf1bceffc1cf85d06419cec9" prot="public" static="no">
        <name>WIFI_CREDENTIALS_FLAG_BSSID</name>
        <initializer>BIT(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="25" column="9" bodyfile="include/net/wifi_credentials.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__wifi__credentials_1ga34c10ac642daf7ee05c1b940c01f8932" prot="public" static="no">
        <name>WIFI_CREDENTIALS_FLAG_FAVORITE</name>
        <initializer>BIT(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="27" column="9" bodyfile="include/net/wifi_credentials.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__wifi__credentials_1ga179a3abf6a1a44b0bee0d2a9736ece0c" prot="public" static="no">
        <name>WIFI_CREDENTIALS_FLAG_2_4GHz</name>
        <initializer>BIT(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="29" column="9" bodyfile="include/net/wifi_credentials.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__wifi__credentials_1ga22d0707e4e4d2fd082563f7c1ebf5308" prot="public" static="no">
        <name>WIFI_CREDENTIALS_FLAG_5GHz</name>
        <initializer>BIT(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="31" column="9" bodyfile="include/net/wifi_credentials.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__wifi__credentials_1gaf9d3ffe6c9120a7fbc248c3ee66f42fa" prot="public" static="no">
        <name>WIFI_CREDENTIALS_MAX_PASSWORD_LEN</name>
        <initializer>	MAX(WIFI_PSK_MAX_LEN, CONFIG_WIFI_CREDENTIALS_SAE_PASSWORD_LENGTH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/wifi_credentials.h" line="34" column="9" bodyfile="include/net/wifi_credentials.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Library that provides a way to store and load Wi-Fi credentials. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
