<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="adv__prov_8h" kind="file" language="C++">
    <compoundname>adv_prov.h</compoundname>
    <includes local="no">zephyr/bluetooth/bluetooth.h</includes>
    <incdepgraph>
      <node id="2">
        <label>zephyr/bluetooth/bluetooth.h</label>
      </node>
      <node id="1">
        <label>include/bluetooth/adv_prov.h</label>
        <link refid="adv__prov_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structbt__le__adv__prov__adv__state" prot="public">bt_le_adv_prov_adv_state</innerclass>
    <innerclass refid="structbt__le__adv__prov__feedback" prot="public">bt_le_adv_prov_feedback</innerclass>
    <innerclass refid="structbt__le__adv__prov__provider" prot="public">bt_le_adv_prov_provider</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__le__adv__prov_ga6275978af65a59f24fdc375d4d66d0e7_1ga6275978af65a59f24fdc375d4d66d0e7" prot="public" static="no">
        <name>BT_LE_ADV_PROV_AD_PROVIDER_REGISTER</name>
        <param><defname>pname</defname></param>
        <param><defname>get_data_fn</defname></param>
        <initializer>	STRUCT_SECTION_ITERABLE_ALTERNATE(bt_le_adv_prov_ad, <ref refid="structbt__le__adv__prov__provider" kindref="compound">bt_le_adv_prov_provider</ref>, pname) = { \
		.get_data = get_data_fn,							 \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register advertising data provider.</para>
<para>The macro statically registers an advertising data provider. The provider appends data to advertising packet managed by the Bluetooth LE advertising providers subsystem.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pname</parametername>
</parameternamelist>
<parameterdescription>
<para>Provider name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_data_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to get provider&apos;s advertising data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="92" column="9" bodyfile="include/bluetooth/adv_prov.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__le__adv__prov_ga9ff3a80df616b465b5627b0e35055d96_1ga9ff3a80df616b465b5627b0e35055d96" prot="public" static="no">
        <name>BT_LE_ADV_PROV_SD_PROVIDER_REGISTER</name>
        <param><defname>pname</defname></param>
        <param><defname>get_data_fn</defname></param>
        <initializer>	STRUCT_SECTION_ITERABLE_ALTERNATE(bt_le_adv_prov_sd, <ref refid="structbt__le__adv__prov__provider" kindref="compound">bt_le_adv_prov_provider</ref>, pname) = { \
		.get_data = get_data_fn,							 \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register scan response data provider.</para>
<para>The macro statically registers a scan response data provider. The provider appends data to scan response packet managed by the Bluetooth LE advertising providers subsystem.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pname</parametername>
</parameternamelist>
<parameterdescription>
<para>Provider name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_data_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to get provider&apos;s scan response data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="105" column="9" bodyfile="include/bluetooth/adv_prov.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__bt__le__adv__prov_gac71bd614f866ce82cbce56a09653f1b7_1gac71bd614f866ce82cbce56a09653f1b7" prot="public" static="no">
        <type>int(*</type>
        <definition>bt_le_adv_prov_data_get</definition>
        <argsstring>)(struct bt_data *d, const struct bt_le_adv_prov_adv_state *state, struct bt_le_adv_prov_feedback *fb)</argsstring>
        <name>bt_le_adv_prov_data_get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback used to get provider&apos;s data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure to be filled with data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure describing Bluetooth advertising state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure describing provider&apos;s feedback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the operation was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(-ENOENT)</parametername>
</parameternamelist>
<parameterdescription>
<para>If provider does not provide data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Other negative value denotes error specific to provider. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="74" column="9" bodyfile="include/bluetooth/adv_prov.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__le__adv__prov_gae4fdadafbda4c912c9b8d34087675d95_1gae4fdadafbda4c912c9b8d34087675d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t bt_le_adv_prov_get_ad_prov_cnt</definition>
        <argsstring>(void)</argsstring>
        <name>bt_le_adv_prov_get_ad_prov_cnt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of advertising data packet providers.</para>
<para>The number of advertising data packet providers defines maximum number of elements in advertising packet that can be provided by providers. An advertising data provider may not provide data.</para>
<para><simplesect kind="return"><para>Number of advertising data packet providers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="117" column="8" declfile="include/bluetooth/adv_prov.h" declline="117" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__le__adv__prov_ga2f023fd69b0da55c55f1fcafd3069cf4_1ga2f023fd69b0da55c55f1fcafd3069cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t bt_le_adv_prov_get_sd_prov_cnt</definition>
        <argsstring>(void)</argsstring>
        <name>bt_le_adv_prov_get_sd_prov_cnt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of scan response data packet providers.</para>
<para>The number of scan response data packet providers defines maximum number of elements in scan response packet that can be provided by providers. A scan response data provider may not provide data.</para>
<para><simplesect kind="return"><para>Number of scan response data packet providers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="127" column="8" declfile="include/bluetooth/adv_prov.h" declline="127" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__le__adv__prov_ga5c6375664e19ed25f1b88123acf5499c_1ga5c6375664e19ed25f1b88123acf5499c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_adv_prov_get_ad</definition>
        <argsstring>(struct bt_data *ad, size_t *ad_len, const struct bt_le_adv_prov_adv_state *state, struct bt_le_adv_prov_feedback *fb)</argsstring>
        <name>bt_le_adv_prov_get_ad</name>
        <param>
          <type>struct bt_data *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>ad_len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__adv__prov__adv__state" kindref="compound">bt_le_adv_prov_adv_state</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__le__adv__prov__feedback" kindref="compound">bt_le_adv_prov_feedback</ref> *</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill advertising data.</para>
<para>Number of elements in array pointed by ad must be at least equal to <ref refid="group__bt__le__adv__prov_gae4fdadafbda4c912c9b8d34087675d95_1gae4fdadafbda4c912c9b8d34087675d95" kindref="member">bt_le_adv_prov_get_ad_prov_cnt</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ad</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to array to be filled with advertising data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Value describing number of elements in the array pointed by ad. The value is then set by the function to number of filled elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure describing advertising state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fb</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure filled with feedback from advertising data providers.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation was successful. Otherwise, a (negative) error code is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="142" column="5" declfile="include/bluetooth/adv_prov.h" declline="142" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__le__adv__prov_gaf93d53d0542d209891556dd0a741f899_1gaf93d53d0542d209891556dd0a741f899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_adv_prov_get_sd</definition>
        <argsstring>(struct bt_data *sd, size_t *sd_len, const struct bt_le_adv_prov_adv_state *state, struct bt_le_adv_prov_feedback *fb)</argsstring>
        <name>bt_le_adv_prov_get_sd</name>
        <param>
          <type>struct bt_data *</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sd_len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__adv__prov__adv__state" kindref="compound">bt_le_adv_prov_adv_state</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__le__adv__prov__feedback" kindref="compound">bt_le_adv_prov_feedback</ref> *</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill scan response data.</para>
<para>Number of elements in array pointed by sd must be at least equal to <ref refid="group__bt__le__adv__prov_ga2f023fd69b0da55c55f1fcafd3069cf4_1ga2f023fd69b0da55c55f1fcafd3069cf4" kindref="member">bt_le_adv_prov_get_sd_prov_cnt</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">sd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to array to be filled with scan response data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sd_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Value describing number of elements in the array pointed by sd. The value is then set by the function to number of filled elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure describing advertising state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fb</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure filled with feedback from scan response data providers.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation was successful. Otherwise, a (negative) error code is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/adv_prov.h" line="159" column="5" declfile="include/bluetooth/adv_prov.h" declline="159" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Bluetooth LE advertising providers subsystem header. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LicenseRef-Nordic-5-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BT_ADV_PROV_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADV_PROV_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr/bluetooth/bluetooth.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structbt__le__adv__prov__adv__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__le__adv__prov__adv__state" kindref="compound">bt_le_adv_prov_adv_state</ref><sp/>{</highlight></codeline>
<codeline lineno="30" refid="structbt__le__adv__prov__adv__state_aca58cd82c0c6f3a6139ff1347245e554_1aca58cd82c0c6f3a6139ff1347245e554" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structbt__le__adv__prov__adv__state_aca58cd82c0c6f3a6139ff1347245e554_1aca58cd82c0c6f3a6139ff1347245e554" kindref="member">pairing_mode</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structbt__le__adv__prov__adv__state_a312951dc41da8d57e02a3e63e75969ff_1a312951dc41da8d57e02a3e63e75969ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structbt__le__adv__prov__adv__state_a312951dc41da8d57e02a3e63e75969ff_1a312951dc41da8d57e02a3e63e75969ff" kindref="member">in_grace_period</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="structbt__le__adv__prov__adv__state_aa81ffc121a14cbfbda6a6cebb87f5c24_1aa81ffc121a14cbfbda6a6cebb87f5c24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structbt__le__adv__prov__adv__state_aa81ffc121a14cbfbda6a6cebb87f5c24_1aa81ffc121a14cbfbda6a6cebb87f5c24" kindref="member">rpa_rotated</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="structbt__le__adv__prov__adv__state_aeb9157271f18811e7ab7767fe44a1591_1aeb9157271f18811e7ab7767fe44a1591" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structbt__le__adv__prov__adv__state_aeb9157271f18811e7ab7767fe44a1591_1aeb9157271f18811e7ab7767fe44a1591" kindref="member">new_adv_session</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="structbt__le__adv__prov__feedback" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__le__adv__prov__feedback" kindref="compound">bt_le_adv_prov_feedback</ref><sp/>{</highlight></codeline>
<codeline lineno="59" refid="structbt__le__adv__prov__feedback_ab0ca4dc7cc2c5904cb7b4c08979e3893_1ab0ca4dc7cc2c5904cb7b4c08979e3893" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbt__le__adv__prov__feedback_ab0ca4dc7cc2c5904cb7b4c08979e3893_1ab0ca4dc7cc2c5904cb7b4c08979e3893" kindref="member">grace_period_s</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="group__bt__le__adv__prov_gac71bd614f866ce82cbce56a09653f1b7_1gac71bd614f866ce82cbce56a09653f1b7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__bt__le__adv__prov_gac71bd614f866ce82cbce56a09653f1b7_1gac71bd614f866ce82cbce56a09653f1b7" kindref="member">bt_le_adv_prov_data_get</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_data<sp/>*d,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__le__adv__prov__adv__state" kindref="compound">bt_le_adv_prov_adv_state</ref><sp/>*<ref refid="vars__internal_8h_a26b2a0469c474a0b173b3791e5c4eb80_1a26b2a0469c474a0b173b3791e5c4eb80" kindref="member">state</ref>,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__le__adv__prov__feedback" kindref="compound">bt_le_adv_prov_feedback</ref><sp/>*fb);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structbt__le__adv__prov__provider" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__le__adv__prov__provider" kindref="compound">bt_le_adv_prov_provider</ref><sp/>{</highlight></codeline>
<codeline lineno="81" refid="structbt__le__adv__prov__provider_a161e8f6c702915bc5ba2cad115dc3f48_1a161e8f6c702915bc5ba2cad115dc3f48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__le__adv__prov_gac71bd614f866ce82cbce56a09653f1b7_1gac71bd614f866ce82cbce56a09653f1b7" kindref="member">bt_le_adv_prov_data_get</ref><sp/><ref refid="structbt__le__adv__prov__provider_a161e8f6c702915bc5ba2cad115dc3f48_1a161e8f6c702915bc5ba2cad115dc3f48" kindref="member">get_data</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="group__bt__le__adv__prov_ga6275978af65a59f24fdc375d4d66d0e7_1ga6275978af65a59f24fdc375d4d66d0e7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_LE_ADV_PROV_AD_PROVIDER_REGISTER(pname,<sp/>get_data_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE_ALTERNATE(bt_le_adv_prov_ad,<sp/>bt_le_adv_prov_provider,<sp/>pname)<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.get_data<sp/>=<sp/>get_data_fn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="group__bt__le__adv__prov_ga9ff3a80df616b465b5627b0e35055d96_1ga9ff3a80df616b465b5627b0e35055d96" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_LE_ADV_PROV_SD_PROVIDER_REGISTER(pname,<sp/>get_data_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE_ALTERNATE(bt_le_adv_prov_sd,<sp/>bt_le_adv_prov_provider,<sp/>pname)<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.get_data<sp/>=<sp/>get_data_fn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="group__bt__le__adv__prov_gae4fdadafbda4c912c9b8d34087675d95_1gae4fdadafbda4c912c9b8d34087675d95" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__bt__le__adv__prov_gae4fdadafbda4c912c9b8d34087675d95_1gae4fdadafbda4c912c9b8d34087675d95" kindref="member">bt_le_adv_prov_get_ad_prov_cnt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="group__bt__le__adv__prov_ga2f023fd69b0da55c55f1fcafd3069cf4_1ga2f023fd69b0da55c55f1fcafd3069cf4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__bt__le__adv__prov_ga2f023fd69b0da55c55f1fcafd3069cf4_1ga2f023fd69b0da55c55f1fcafd3069cf4" kindref="member">bt_le_adv_prov_get_sd_prov_cnt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="group__bt__le__adv__prov_ga5c6375664e19ed25f1b88123acf5499c_1ga5c6375664e19ed25f1b88123acf5499c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__le__adv__prov_ga5c6375664e19ed25f1b88123acf5499c_1ga5c6375664e19ed25f1b88123acf5499c" kindref="member">bt_le_adv_prov_get_ad</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_data<sp/>*ad,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*ad_len,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__le__adv__prov__adv__state" kindref="compound">bt_le_adv_prov_adv_state</ref><sp/>*<ref refid="vars__internal_8h_a26b2a0469c474a0b173b3791e5c4eb80_1a26b2a0469c474a0b173b3791e5c4eb80" kindref="member">state</ref>,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__le__adv__prov__feedback" kindref="compound">bt_le_adv_prov_feedback</ref><sp/>*fb);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="group__bt__le__adv__prov_gaf93d53d0542d209891556dd0a741f899_1gaf93d53d0542d209891556dd0a741f899" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__le__adv__prov_gaf93d53d0542d209891556dd0a741f899_1gaf93d53d0542d209891556dd0a741f899" kindref="member">bt_le_adv_prov_get_sd</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_data<sp/>*sd,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*sd_len,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__le__adv__prov__adv__state" kindref="compound">bt_le_adv_prov_adv_state</ref><sp/>*<ref refid="vars__internal_8h_a26b2a0469c474a0b173b3791e5c4eb80_1a26b2a0469c474a0b173b3791e5c4eb80" kindref="member">state</ref>,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__le__adv__prov__feedback" kindref="compound">bt_le_adv_prov_feedback</ref><sp/>*fb);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BT_ADV_PROV_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/bluetooth/adv_prov.h"/>
  </compounddef>
</doxygen>
