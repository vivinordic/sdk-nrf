<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structnrf__modem__lib__trace__backend" kind="struct" language="C++" prot="public">
    <compoundname>nrf_modem_lib_trace_backend</compoundname>
    <includes refid="trace__backend_8h" local="no">trace_backend.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structnrf__modem__lib__trace__backend_a210314a128beac4e42772bf2d685b77b_1a210314a128beac4e42772bf2d685b77b" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* nrf_modem_lib_trace_backend::init) (trace_backend_processed_cb trace_processed_cb)</definition>
        <argsstring>)(trace_backend_processed_cb trace_processed_cb)</argsstring>
        <name>init</name>
        <briefdescription>
<para>Initialize the compile-time selected trace backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trace_processed_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function callback for signaling how much of the trace data has been processed by the backend.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 If the operation was successful. Otherwise, a (negative) error code is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/trace_backend.h" line="39" column="1" bodyfile="include/modem/trace_backend.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnrf__modem__lib__trace__backend_a3e11f1fe6d995e45c11efdf0a12d9780_1a3e11f1fe6d995e45c11efdf0a12d9780" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* nrf_modem_lib_trace_backend::deinit) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>deinit</name>
        <briefdescription>
<para>Deinitialize the compile-time selected trace backend. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 If the operation was successful. Otherwise, a (negative) error code is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/trace_backend.h" line="47" column="1" bodyfile="include/modem/trace_backend.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnrf__modem__lib__trace__backend_afacdfe03aeb8ef91aef78c4e7c153d00_1afacdfe03aeb8ef91aef78c4e7c153d00" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* nrf_modem_lib_trace_backend::write) (const void *data, size_t len)</definition>
        <argsstring>)(const void *data, size_t len)</argsstring>
        <name>write</name>
        <briefdescription>
<para>Write trace data to the compile-time selected trace backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory buffer containing modem trace data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory buffer length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes written if the operation was successful. Otherwise, a (negative) error code is returned. Especially, -ENOSPC if no space is available and the backend has to be cleared before tracing can continue. For some trace backends, space is also cleared when performing the read operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/trace_backend.h" line="62" column="1" bodyfile="include/modem/trace_backend.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnrf__modem__lib__trace__backend_ab64c2f14440181a6a492d1cd9ef97ddd_1ab64c2f14440181a6a492d1cd9ef97ddd" prot="public" static="no" mutable="no">
        <type>size_t(*</type>
        <definition>size_t(* nrf_modem_lib_trace_backend::data_size) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>data_size</name>
        <briefdescription>
<para>Get the number of bytes stored in the compile-time selected trace backend. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>To ensure the retrieved number of bytes is correct, this function should only be called when the backend is done processing traces. Set to <computeroutput>NULL</computeroutput> if this operation is not supported by the trace backend.</para>
</simplesect>
<simplesect kind="return"><para>Number of bytes stored in the trace backend. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/trace_backend.h" line="73" column="1" bodyfile="include/modem/trace_backend.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnrf__modem__lib__trace__backend_a5f270e2da963c478d758e373501ab957_1a5f270e2da963c478d758e373501ab957" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* nrf_modem_lib_trace_backend::read) (void *buf, size_t len)</definition>
        <argsstring>)(void *buf, size_t len)</argsstring>
        <name>read</name>
        <briefdescription>
<para>Read trace data from the compile-time selected trace backend. </para>
        </briefdescription>
        <detaileddescription>
<para>Read out the trace data from the trace backend. After read, the backend can free the space and prepare it for further write operations.</para>
<para><simplesect kind="note"><para>Set to <computeroutput>NULL</computeroutput> if this operation is not supported by the trace backend.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of output buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/trace_backend.h" line="88" column="1" bodyfile="include/modem/trace_backend.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnrf__modem__lib__trace__backend_a8f35e051005e4be3f6e01f35066c75ef_1a8f35e051005e4be3f6e01f35066c75ef" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* nrf_modem_lib_trace_backend::clear) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Erase all captured trace data in the compile-time selected trace backend. </para>
        </briefdescription>
        <detaileddescription>
<para>Erase all captured trace data and prepare for capturing new traces.</para>
<para><simplesect kind="note"><para>Set to <computeroutput>NULL</computeroutput> if this operation is not supported by the trace backend.</para>
</simplesect>
<simplesect kind="return"><para>0 on success, negative errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modem/trace_backend.h" line="99" column="1" bodyfile="include/modem/trace_backend.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The trace backend interface, implemented by the trace backend. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/modem/trace_backend.h" line="29" column="1" bodyfile="include/modem/trace_backend.h" bodystart="29" bodyend="100"/>
    <listofallmembers>
      <member refid="structnrf__modem__lib__trace__backend_a8f35e051005e4be3f6e01f35066c75ef_1a8f35e051005e4be3f6e01f35066c75ef" prot="public" virt="non-virtual"><scope>nrf_modem_lib_trace_backend</scope><name>clear</name></member>
      <member refid="structnrf__modem__lib__trace__backend_ab64c2f14440181a6a492d1cd9ef97ddd_1ab64c2f14440181a6a492d1cd9ef97ddd" prot="public" virt="non-virtual"><scope>nrf_modem_lib_trace_backend</scope><name>data_size</name></member>
      <member refid="structnrf__modem__lib__trace__backend_a3e11f1fe6d995e45c11efdf0a12d9780_1a3e11f1fe6d995e45c11efdf0a12d9780" prot="public" virt="non-virtual"><scope>nrf_modem_lib_trace_backend</scope><name>deinit</name></member>
      <member refid="structnrf__modem__lib__trace__backend_a210314a128beac4e42772bf2d685b77b_1a210314a128beac4e42772bf2d685b77b" prot="public" virt="non-virtual"><scope>nrf_modem_lib_trace_backend</scope><name>init</name></member>
      <member refid="structnrf__modem__lib__trace__backend_a5f270e2da963c478d758e373501ab957_1a5f270e2da963c478d758e373501ab957" prot="public" virt="non-virtual"><scope>nrf_modem_lib_trace_backend</scope><name>read</name></member>
      <member refid="structnrf__modem__lib__trace__backend_afacdfe03aeb8ef91aef78c4e7c153d00_1afacdfe03aeb8ef91aef78c4e7c153d00" prot="public" virt="non-virtual"><scope>nrf_modem_lib_trace_backend</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
