<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="pcm__stream__channel__modifier_8h" kind="file" language="C++">
    <compoundname>pcm_stream_channel_modifier.h</compoundname>
    <includes local="no">zephyr/kernel.h</includes>
    <includes refid="audio__defines_8h" local="no">audio_defines.h</includes>
    <incdepgraph>
      <node id="3">
        <label>audio_defines.h</label>
        <link refid="audio__defines_8h"/>
      </node>
      <node id="1">
        <label>include/pcm_stream_channel_modifier.h</label>
        <link refid="pcm__stream__channel__modifier_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zephyr/kernel.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__pscm_ga8aff390fb3e2c28df2617e71318c7a7b_1ga8aff390fb3e2c28df2617e71318c7a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pscm_zero_pad</definition>
        <argsstring>(void const *const input, size_t input_size, enum audio_channel channel, uint8_t pcm_bit_depth, void *output, size_t *output_size)</argsstring>
        <name>pscm_zero_pad</name>
        <param>
          <type>void const *const</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>input_size</declname>
        </param>
        <param>
          <type>enum <ref refid="audio__defines_8h_a2b5a19d3dea9946ab7cbad0c770a9ad4_1a2b5a19d3dea9946ab7cbad0c770a9ad4" kindref="member">audio_channel</ref></type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pcm_bit_depth</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>output_size</declname>
        </param>
        <briefdescription>
<para>Adds a 0 after every sample from *input and writes it to *output. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use to create stereo stream from a mono source where one channel is silent.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes in input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to contain the audio data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pcm_bit_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit depth of PCM samples (16, 24, or 32). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes written to the output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pcm_stream_channel_modifier.h" line="40" column="5" declfile="include/pcm_stream_channel_modifier.h" declline="40" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__pscm_ga282983be5a743d6f54095631f954c8c7_1ga282983be5a743d6f54095631f954c8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pscm_copy_pad</definition>
        <argsstring>(void const *const input, size_t input_size, uint8_t pcm_bit_depth, void *output, size_t *output_size)</argsstring>
        <name>pscm_copy_pad</name>
        <param>
          <type>void const *const</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>input_size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pcm_bit_depth</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>output_size</declname>
        </param>
        <briefdescription>
<para>Adds a copy of every sample from *input and writes it to both channels in *output. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use to create stereo stream from a mono source where both channels are identical.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes in input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pcm_bit_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit depth of PCM samples (16, 24, or 32). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes written to output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pcm_stream_channel_modifier.h" line="56" column="5" declfile="include/pcm_stream_channel_modifier.h" declline="56" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__pscm_ga8a6e770637cb5e3974765ec537611d08_1ga8a6e770637cb5e3974765ec537611d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pscm_combine</definition>
        <argsstring>(void const *const input_left, void const *const input_right, size_t input_size, uint8_t pcm_bit_depth, void *output, size_t *output_size)</argsstring>
        <name>pscm_combine</name>
        <param>
          <type>void const *const</type>
          <declname>input_left</declname>
        </param>
        <param>
          <type>void const *const</type>
          <declname>input_right</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>input_size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pcm_bit_depth</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>output_size</declname>
        </param>
        <briefdescription>
<para>Combines two mono streams into one stereo stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input_left</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input buffer for the left channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_right</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input buffer for the right channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes in the input. Same for both channels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pcm_bit_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit depth of PCM samples (16, 24, or 32). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes written to the output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pcm_stream_channel_modifier.h" line="70" column="5" declfile="include/pcm_stream_channel_modifier.h" declline="70" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__pscm_ga860cb8917994a642f98a4cb1e4c80cb0_1ga860cb8917994a642f98a4cb1e4c80cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pscm_one_channel_split</definition>
        <argsstring>(void const *const input, size_t input_size, enum audio_channel channel, uint8_t pcm_bit_depth, void *output, size_t *output_size)</argsstring>
        <name>pscm_one_channel_split</name>
        <param>
          <type>void const *const</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>input_size</declname>
        </param>
        <param>
          <type>enum <ref refid="audio__defines_8h_a2b5a19d3dea9946ab7cbad0c770a9ad4_1a2b5a19d3dea9946ab7cbad0c770a9ad4" kindref="member">audio_channel</ref></type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pcm_bit_depth</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>output_size</declname>
        </param>
        <briefdescription>
<para>Removes every second sample from *input and writes it to *output. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use to split stereo audio stream to single channel.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes in the input. Must be divisible by two. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to keep the audio data from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pcm_bit_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit depth of PCM samples (16, 24, or 32). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes written to the output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pcm_stream_channel_modifier.h" line="87" column="5" declfile="include/pcm_stream_channel_modifier.h" declline="87" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__pscm_ga68b2e93d69840321943ee4ae258461ea_1ga68b2e93d69840321943ee4ae258461ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pscm_two_channel_split</definition>
        <argsstring>(void const *const input, size_t input_size, uint8_t pcm_bit_depth, void *output_left, void *output_right, size_t *output_size)</argsstring>
        <name>pscm_two_channel_split</name>
        <param>
          <type>void const *const</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>input_size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pcm_bit_depth</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output_left</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output_right</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>output_size</declname>
        </param>
        <briefdescription>
<para>Splits a stereo stream to two separate mono streams. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use to split stereo audio stream to two separate channels.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes in input. Must be divisible by two. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pcm_bit_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit depth of PCM samples (16, 24, or 32). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_left</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output buffer containing the left channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_right</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output buffer containing the right channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes written to the output, same for both channels.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pcm_stream_channel_modifier.h" line="107" column="5" declfile="include/pcm_stream_channel_modifier.h" declline="107" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PCM Stream Channel Modifier library header. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LicenseRef-Nordic-5-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_PCM_STREAM_CHANNEL_MODIFIER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PCM_STREAM_CHANNEL_MODIFIER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr/kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="audio__defines_8h" kindref="compound">audio_defines.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="group__pscm_ga8aff390fb3e2c28df2617e71318c7a7b_1ga8aff390fb3e2c28df2617e71318c7a7b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pscm_ga8aff390fb3e2c28df2617e71318c7a7b_1ga8aff390fb3e2c28df2617e71318c7a7b" kindref="member">pscm_zero_pad</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>input_size,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="audio__defines_8h_a2b5a19d3dea9946ab7cbad0c770a9ad4_1a2b5a19d3dea9946ab7cbad0c770a9ad4" kindref="member">audio_channel</ref><sp/>channel,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>pcm_bit_depth,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*output_size);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="group__pscm_ga282983be5a743d6f54095631f954c8c7_1ga282983be5a743d6f54095631f954c8c7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pscm_ga282983be5a743d6f54095631f954c8c7_1ga282983be5a743d6f54095631f954c8c7" kindref="member">pscm_copy_pad</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>input_size,<sp/>uint8_t<sp/>pcm_bit_depth,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*output,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*output_size);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="group__pscm_ga8a6e770637cb5e3974765ec537611d08_1ga8a6e770637cb5e3974765ec537611d08" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pscm_ga8a6e770637cb5e3974765ec537611d08_1ga8a6e770637cb5e3974765ec537611d08" kindref="member">pscm_combine</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_left,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input_right,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>input_size,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>pcm_bit_depth,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*output_size);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="group__pscm_ga860cb8917994a642f98a4cb1e4c80cb0_1ga860cb8917994a642f98a4cb1e4c80cb0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pscm_ga860cb8917994a642f98a4cb1e4c80cb0_1ga860cb8917994a642f98a4cb1e4c80cb0" kindref="member">pscm_one_channel_split</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>input_size,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="audio__defines_8h_a2b5a19d3dea9946ab7cbad0c770a9ad4_1a2b5a19d3dea9946ab7cbad0c770a9ad4" kindref="member">audio_channel</ref><sp/>channel,<sp/>uint8_t<sp/>pcm_bit_depth,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*output,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*output_size);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="group__pscm_ga68b2e93d69840321943ee4ae258461ea_1ga68b2e93d69840321943ee4ae258461ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pscm_ga68b2e93d69840321943ee4ae258461ea_1ga68b2e93d69840321943ee4ae258461ea" kindref="member">pscm_two_channel_split</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>input_size,<sp/>uint8_t<sp/>pcm_bit_depth,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*output_left,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*output_right,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*output_size);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_PCM_STREAM_CHANNEL_MODIFIER_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/pcm_stream_channel_modifier.h"/>
  </compounddef>
</doxygen>
