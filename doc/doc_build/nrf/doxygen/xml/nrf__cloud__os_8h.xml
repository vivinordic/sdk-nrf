<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="nrf__cloud__os_8h" kind="file" language="C++">
    <compoundname>nrf_cloud_os.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">zephyr/kernel.h</includes>
    <includedby refid="nrf__cloud_8h" local="no">include/net/nrf_cloud.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/net/nrf_cloud_os.h</label>
        <link refid="nrf__cloud__os_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>zephyr/kernel.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/net/nrf_cloud_os.h</label>
        <link refid="nrf__cloud__os_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/net/nrf_cloud_location.h</label>
        <link refid="nrf__cloud__location_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/net/nrf_cloud_agps.h</label>
        <link refid="nrf__cloud__agps_8h"/>
      </node>
      <node id="5">
        <label>include/net/nrf_cloud_rest.h</label>
        <link refid="nrf__cloud__rest_8h"/>
      </node>
      <node id="2">
        <label>include/net/nrf_cloud.h</label>
        <link refid="nrf__cloud_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structnrf__cloud__os__mem__hooks" prot="public">nrf_cloud_os_mem_hooks</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__cloud__os_ga5b6e596e4dd0e4a9e1bb30c75b2e17cd_1ga5b6e596e4dd0e4a9e1bb30c75b2e17cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrf_cloud_os_mem_hooks_init</definition>
        <argsstring>(struct nrf_cloud_os_mem_hooks *hooks)</argsstring>
        <name>nrf_cloud_os_mem_hooks_init</name>
        <param>
          <type>struct <ref refid="structnrf__cloud__os__mem__hooks" kindref="compound">nrf_cloud_os_mem_hooks</ref> *</type>
          <declname>hooks</declname>
        </param>
        <briefdescription>
<para>Initialize the used OS memory hooks. As a default, nRF Cloud library uses OS kernel heap memory (in other words, k_ prepending OS functions). This can be used to override those (for example, to be using OS system heap, that is standard C calloc/malloc/free). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This API must be called before using nRF Cloud, even before <ref refid="group__nrf__cloud_ga1d7e9e66df5c45750c6479c0439f49fd_1ga1d7e9e66df5c45750c6479c0439f49fd" kindref="member">nrf_cloud_init()</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hooks</parametername>
</parameternamelist>
<parameterdescription>
<para>Used memory alloc/free functions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/nrf_cloud_os.h" line="38" column="6" declfile="include/net/nrf_cloud_os.h" declline="38" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LicenseRef-Nordic-5-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_CLOUD_OS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOUD_OS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr/kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structnrf__cloud__os__mem__hooks" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnrf__cloud__os__mem__hooks" kindref="compound">nrf_cloud_os_mem_hooks</ref><sp/>{</highlight></codeline>
<codeline lineno="23" refid="structnrf__cloud__os__mem__hooks_ab33540e89c3b205953f43950c9cb2304_1ab33540e89c3b205953f43950c9cb2304" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*malloc_fn)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="24" refid="structnrf__cloud__os__mem__hooks_aa677e59cca629e65417404a533e091f1_1aa677e59cca629e65417404a533e091f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*calloc_fn)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="25" refid="structnrf__cloud__os__mem__hooks_afcc074f05474eb77755998ec9b3da668_1afcc074f05474eb77755998ec9b3da668" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structnrf__cloud__os__mem__hooks_afcc074f05474eb77755998ec9b3da668_1afcc074f05474eb77755998ec9b3da668" kindref="member">free_fn</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="group__nrf__cloud__os_ga5b6e596e4dd0e4a9e1bb30c75b2e17cd_1ga5b6e596e4dd0e4a9e1bb30c75b2e17cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cloud__os_ga5b6e596e4dd0e4a9e1bb30c75b2e17cd_1ga5b6e596e4dd0e4a9e1bb30c75b2e17cd" kindref="member">nrf_cloud_os_mem_hooks_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnrf__cloud__os__mem__hooks" kindref="compound">nrf_cloud_os_mem_hooks</ref><sp/>*hooks);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_CLOUD_OS_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/net/nrf_cloud_os.h"/>
  </compounddef>
</doxygen>
