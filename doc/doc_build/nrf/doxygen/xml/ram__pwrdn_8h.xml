<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ram__pwrdn_8h" kind="file" language="C++">
    <compoundname>ram_pwrdn.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ram__pwrdn_ga65239d77faeaf24f5a1569019dbb595a_1ga65239d77faeaf24f5a1569019dbb595a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void power_down_ram</definition>
        <argsstring>(uintptr_t start_address, uintptr_t end_address)</argsstring>
        <name>power_down_ram</name>
        <param>
          <type>uintptr_t</type>
          <declname>start_address</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>end_address</declname>
        </param>
        <briefdescription>
<para>Request powering down RAM sections for the given address range. </para>
        </briefdescription>
        <detaileddescription>
<para>Power down RAM sections which fully fall within the given address range. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ram_pwrdn.h" line="30" column="6" declfile="include/ram_pwrdn.h" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ram__pwrdn_gafaea36bac1244da581c3bf550d9a6141_1gafaea36bac1244da581c3bf550d9a6141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void power_up_ram</definition>
        <argsstring>(uintptr_t start_address, uintptr_t end_address)</argsstring>
        <name>power_up_ram</name>
        <param>
          <type>uintptr_t</type>
          <declname>start_address</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>end_address</declname>
        </param>
        <briefdescription>
<para>Request powering up RAM sections for the given address range. </para>
        </briefdescription>
        <detaileddescription>
<para>Power up RAM sections which overlap with the given address range. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ram_pwrdn.h" line="37" column="6" declfile="include/ram_pwrdn.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ram__pwrdn_ga1fa7412b0e59da071b520065cbef8649_1ga1fa7412b0e59da071b520065cbef8649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void power_down_unused_ram</definition>
        <argsstring>(void)</argsstring>
        <name>power_down_unused_ram</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Request powering down unused RAM sections. </para>
        </briefdescription>
        <detaileddescription>
<para>Power down RAM sections which are not used by the application image.</para>
<para><simplesect kind="note"><para>Some libc implementations use the memory area following the application image for heap. If this is the case and the application relies on dynamic memory allocations, this function should not be used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ram_pwrdn.h" line="49" column="6" declfile="include/ram_pwrdn.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ram__pwrdn_ga5e2a0eb2a1f44dee5ff6a31658db491f_1ga5e2a0eb2a1f44dee5ff6a31658db491f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void power_up_unused_ram</definition>
        <argsstring>(void)</argsstring>
        <name>power_up_unused_ram</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Request powering up unused RAM sections. </para>
        </briefdescription>
        <detaileddescription>
<para>Power up RAM sections which were disabled by <ref refid="group__ram__pwrdn_ga1fa7412b0e59da071b520065cbef8649_1ga1fa7412b0e59da071b520065cbef8649" kindref="member">power_down_unused_ram</ref> function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ram_pwrdn.h" line="56" column="6" declfile="include/ram_pwrdn.h" declline="56" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>RAM section power down header. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LicenseRef-Nordic-5-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RAM_PWRDN_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RAM_PWRDN_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="group__ram__pwrdn_ga65239d77faeaf24f5a1569019dbb595a_1ga65239d77faeaf24f5a1569019dbb595a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ram__pwrdn_ga65239d77faeaf24f5a1569019dbb595a_1ga65239d77faeaf24f5a1569019dbb595a" kindref="member">power_down_ram</ref>(uintptr_t<sp/>start_address,<sp/>uintptr_t<sp/>end_address);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__ram__pwrdn_gafaea36bac1244da581c3bf550d9a6141_1gafaea36bac1244da581c3bf550d9a6141" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ram__pwrdn_gafaea36bac1244da581c3bf550d9a6141_1gafaea36bac1244da581c3bf550d9a6141" kindref="member">power_up_ram</ref>(uintptr_t<sp/>start_address,<sp/>uintptr_t<sp/>end_address);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="group__ram__pwrdn_ga1fa7412b0e59da071b520065cbef8649_1ga1fa7412b0e59da071b520065cbef8649" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ram__pwrdn_ga1fa7412b0e59da071b520065cbef8649_1ga1fa7412b0e59da071b520065cbef8649" kindref="member">power_down_unused_ram</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="group__ram__pwrdn_ga5e2a0eb2a1f44dee5ff6a31658db491f_1ga5e2a0eb2a1f44dee5ff6a31658db491f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ram__pwrdn_ga5e2a0eb2a1f44dee5ff6a31658db491f_1ga5e2a0eb2a1f44dee5ff6a31658db491f" kindref="member">power_up_unused_ram</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>RAM_PWRDN_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/ram_pwrdn.h"/>
  </compounddef>
</doxygen>
